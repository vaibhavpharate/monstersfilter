{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","cardData","id","alt","name","email","CardList","monstersData","map","singleMonster","key","SearchBox","placeholder","handleChange","type","onChange","App","clicked3","console","log","changeHandler","event","setState","searchField","target","value","state","monsters","clicked2","clicked1","bind","fetch","then","allData","json","actualData","this","filteredMonsters","filter","single","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6TAgBeA,G,kBAbF,SAACC,GACV,OACE,yBAAKC,UAAU,QACX,yBAAKC,IAAG,+BAA0BF,EAAMG,SAASC,GAAzC,0BAAqEC,IAAKL,EAAMG,SAASG,OACjG,4BACKN,EAAMG,SAASG,MAEpB,2BACKN,EAAMG,SAASI,UCAfC,EAPE,SAACR,GACd,OACI,yBAAKC,UAAU,aACVD,EAAMS,aAAaC,KAAI,SAAAC,GAAa,OAAE,kBAAC,EAAD,CAAMC,IAAKD,EAAcP,GAAID,SAAUQ,SCE3EE,G,MALG,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aAC5B,OACI,2BAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,EAAcd,UAAU,iBC2E1EiB,E,kDA1EX,aAAe,IAAD,8BACV,gBAYJC,SAAW,WACPC,QAAQC,IAAI,yBAdF,EA0BdC,cAAgB,SAACC,GAIb,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SA5BzC,EAAKC,MAAQ,CACTC,SAAU,GACVJ,YAAa,IAEjB,EAAKK,SAAW,EAAKC,SAASC,KAAd,gBANN,E,uDAUVZ,QAAQC,IAAI,wB,0CAOK,IAAD,OAChBY,MAAM,8CACDC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAU,OAAI,EAAKb,SAAS,CAACK,SAAUQ,S,+BAc5C,MAI2BC,KAAKV,MAA9BC,EAJF,EAIEA,SAAUJ,EAJZ,EAIYA,YACXc,EAAmBV,EAASW,QAAO,SAAAC,GAAM,OAAIA,EAAOnC,KAAKoC,cAAcC,SAASlB,EAAYiB,kBAClG,OAEI,yBAAKzC,UAAU,OAGX,gCACI,wBAAIA,UAAU,cAAd,mBAoBA,kBAAC,EAAD,CAAWa,YAAY,0BAA0BC,aAAcuB,KAAKhB,gBACpE,kBAAC,EAAD,CAAUb,aAAc8B,U,GApE1BK,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.7cc79a4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.style.css\";\r\n\r\nconst Card = (props) => {\r\n    return(\r\n      <div className=\"card\">\r\n          <img src={`https://robohash.org/${props.cardData.id}?set=set2&size=180x180`} alt={props.cardData.name}/>\r\n          <h3>\r\n              {props.cardData.name}\r\n          </h3>\r\n          <p>\r\n              {props.cardData.email}\r\n          </p>\r\n      </div>\r\n    );\r\n}\r\nexport default Card;","import React from \"react\";\r\nimport './card-list.style.css';\r\nimport Card from \"../card/card.component\";\r\n\r\nconst CardList = (props)=>{\r\n    return(\r\n        <div className=\"card-list\">\r\n            {props.monstersData.map(singleMonster=><Card key={singleMonster.id} cardData={singleMonster} />)}\r\n        </div>\r\n    )\r\n}\r\nexport default CardList","import React from \"react\";\r\nimport './search-box.style.css';\r\n\r\n// props is destructured into {placeholder,handleChange}\r\nconst SearchBox = ({placeholder,handleChange}) => {\r\n    return (\r\n        <input type=\"search\" placeholder={placeholder} onChange={handleChange} className=\"search-box\"/>\r\n    )\r\n}\r\nexport default SearchBox;","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            monsters: [],\n            searchField: \"\"\n        }\n        this.clicked2 = this.clicked1.bind(this);\n    }\n\n    clicked1() {\n        console.log(\"Button was Clicked\")\n    }\n\n    clicked3 = () => {\n        console.log(\"Button 3 was clicked\")\n    }\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(allData => allData.json())\n            .then(actualData => this.setState({monsters: actualData}))\n    }\n\n    // Arrow function binds the context of `this` which is on class App to be used inside the function\n    // which takes care of setting this.setState which helps in rendering the components again according\n    // to the event occurred\n    changeHandler = (event) => {\n        // SyntheticEvent (event) is actually triggered in input onChange component rendered HERE in class App\n        // but the state change is occurring here based on the SyntheticEvent onChange give by changeHandler\n        // and passed as a prop named `handleChange` to SearchBox component\n        this.setState({searchField: event.target.value})\n    }\n\n\n    render() {\n        // De-structuring\n        // const monsters = this.state.monsters;\n        // cosnt searchField = this.state.searchField;\n        const {monsters, searchField} = this.state;\n        const filteredMonsters = monsters.filter(single => single.name.toLowerCase().includes(searchField.toLowerCase()))\n        return (\n\n            <div className=\"App\">\n\n                {/*this.setState is async method so we actually console.log or do anything else after setState as a callback  */}\n                <header>\n                    <h1 className=\"headerFont\">\n                        Monster Filters\n                    </h1>\n                    {/*<input type=\"search\"*/}\n                    {/*       placeholder=\"Enter Monster name\"*/}\n                    {/*       onChange={event => this.setState({searchField: event.target.value}, () => {*/}\n                    {/*           // This is a Callback*/}\n                    {/*           console.log(this.state);*/}\n                    {/*       })}*/}\n                    {/*/>*/}\n                    {/*<input type=\"search\"*/}\n                    {/*       placeholder=\"Enter Monster Name\"*/}\n                    {/*       onChange={event =>{this.setState({searchField:event.target.value})}}*/}\n                    {/*/>*/}\n                    {/*<div>*/}\n                    {/*    <button onClick={this.clicked1()}>Click 1</button>*/}\n                    {/*<button onClick={this.clicked1}>Click 2</button>*/}\n                    {/*    <button onClick={this.clicked2}>Click 3</button>*/}\n                    {/*    <button onClick={this.clicked3}>Click 4</button>*/}\n                    {/*</div>*/}\n                    <SearchBox placeholder=\"Enter Monster Name Here\" handleChange={this.changeHandler}/>\n                    <CardList monstersData={filteredMonsters}/>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}